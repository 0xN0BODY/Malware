
XOR_MASK = 0x22065FED


MAX_BLOCK_SIZE = 0xFA1
DIVIDER = 0x1000F


ror32 = lambda val, shift: \
    ((val & 0xFFFFFFFF) >> (shift & 0x1F)) | \
    ((val << (32 - (shift & 0x1F))) & 0xFFFFFFFF)


def get_wide_str_hash(s, n=0):

    for ch in s:

        m = ord(ch)
        if (m >= 0x41) and (m <= 0x5A):
            m |= 0x20
        n = m + ror32(n, 13)

    return ror32(n, 13)


def get_str_hash(s, n=0):

    for ch in s:

        n = ord(ch) + ror32(n, 13)

    return ror32(n, 13)


def get_api_func_name_hash(lib_name, fnc_name):

    return get_str_hash(fnc_name, get_wide_str_hash(lib_name, 0))


def get_data_hash(data, n=0):

    n0 = n & 0xFFFF
    n1 = n >> 16

    size = len(data)

    pos = 0

    while (size != 0):

        block_size = min(size, MAX_BLOCK_SIZE)

        for i in range(block_size):
            n0 += data[pos + i]
            n1 += n0

        n0 %= DIVIDER
        n1 %= DIVIDER

        pos += block_size
        size -= block_size

    return (n0 + (n1 << 16)) & 0xFFFFFFFF


def get_meta_data_hash(data):

    h = 0x0D6917A

    for _ in range(3):

        h = int.from_bytes(get_data_hash(data, h).to_bytes(4, 'little'), 'big')

    return h


if __name__ == '__main__':
    import io

    with io.open('api_names.txt', 'rt') as f:
        func_names = f.read().splitlines()

    with io.open('api_hashes.txt', 'wt') as f:
        for name in func_names:
            name = name.strip()
            if (name == ''):
                continue
            names = name.split('\t')
            h = get_api_func_name_hash(names[0], names[1]) ^ XOR_MASK
            f.write('%08X\t%s\n' % (h, names[1]))
