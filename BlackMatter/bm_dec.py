
V3_RND_SEED = 0x910FDE2951947BBF

V1_RND_MULTIPLIER = 0x8088405
V2_RND_MULTIPLIER = 0x5851F42D4C957F2D
V2_RND_ADDENDUM = 1
V3_RND_ADDENDUM = 0x14057B7EF767814F


def decrypt32(data, seed):

    dec_data = b''

    n = seed

    pos = 0

    size = len(data)

    while (size != 0):

        n = (n * V1_RND_MULTIPLIER + 1) & 0xFFFFFFFF
        x = (seed * n) >> 32

        xx = x.to_bytes(4, byteorder='little')

        block_size = min(4, size)

        for i in range(block_size):
            dec_data += bytes([data[pos + i] ^ xx[i]])

        pos += block_size
        size -= block_size

    return dec_data


def rnd_mul(n, m):

    n0 = n & 0xFFFFFFFF
    n1 = n >> 32
    m0 = m & 0xFFFFFFFF
    m1 = m >> 32

    if (n1 | m1 == 0):
        return (n0 * m0)

    x0 = m0 * n0
    x1 = (m0 * n1 + m1 * n0 + (x0 >> 32)) & 0xFFFFFFFF
    return (x0 & 0xFFFFFFFF) | (x1 << 32)


def make_byte_mask(x):

    mask = b''

    x0 = x & 0xFFFFFFFF
    x1 = x >> 32

    for _ in range(2):

        mask += bytes([x0 & 0xFF])
        x0 >>= 8
        b3 = x1 & 0xFF
        x1 >>= 8
        mask += bytes([x1 & 0xFF])
        mask += bytes([x0 & 0xFF])
        mask += bytes([b3])

        x0 >>= 8
        x1 >>= 8

    return mask


def decrypt64(data, addendum, seed):

    dec_data = b''

    n = seed

    pos = 0

    size = len(data)

    while (size != 0):

        n = (rnd_mul(n, V2_RND_MULTIPLIER) + addendum) & 0xFFFFFFFFFFFFFFFF
        x = rnd_mul(seed, n)

        xx = make_byte_mask(x)

        block_size = min(8, size)

        for i in range(block_size):
            dec_data += bytes([data[pos + i] ^ xx[i]])

        pos += block_size
        size -= block_size

    return dec_data


def decrypt2(data, seed):

    return decrypt64(data, V2_RND_ADDENDUM, seed)


def decrypt3(data, seed):

    return decrypt64(data, V3_RND_ADDENDUM, seed)


if __name__ == '__main__':
    import sys
    import io

    if len(sys.argv) != 2:
        print('Usage: '+ sys.argv[0] + ' filename')
        sys.exit(0)

    file_name = sys.argv[1]
    with io.open(file_name, 'rb') as f:
        data = f.read()

    dec_data = decrypt3(data, V3_RND_SEED)

    new_file_name = file_name + '.dec'
    with io.open(new_file_name, 'wb') as f:
        f.write(dec_data)

    print('Done!')
