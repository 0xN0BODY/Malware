import sys
import io
import zlib
import rc4
import idautils
import idaapi


CFG_SECTION_NAME = '.cfg'

KEY_LEN = 32


segm = ida_segment.get_segm_by_name(CFG_SECTION_NAME)
if (segm is None):
    raise Exception('Configuration section not found.')

ea = segm.start_ea

ida_name.set_name(ea, 'cfg_key')
ida_bytes.create_data(ea, ida_bytes.FF_STRLIT, KEY_LEN, BADADDR)
key = ida_bytes.get_bytes(ea, KEY_LEN)
ea += KEY_LEN

ida_name.set_name(ea, 'enc_cfg_crc')
ida_bytes.create_data(ea, ida_bytes.FF_DWORD, 4, BADADDR)
crc = ida_bytes.get_dword(ea)
ea += 4
print('cfg data crc32: %08X' % crc)

ida_name.set_name(ea, 'enc_cfg_size')
ida_bytes.create_data(ea, ida_bytes.FF_DWORD, 4, BADADDR)
cfg_data_size = ida_bytes.get_dword(ea)
ea += 4
print('cfg data size:  %d' % cfg_data_size)

ida_name.set_name(ea, 'enc_cfg_data')
enc_cfg_data = ida_bytes.get_bytes(ea, cfg_data_size)

crc_2 = zlib.crc32(enc_cfg_data)
if (crc != crc_2):
    raise Exception('Invalid cfg data checksum.')

cfg_data = rc4.rc4(enc_cfg_data, key)

with io.open('cfg.bin', 'wb') as f:
    f.write(cfg_data)

ida_bytes.del_items(ea, 0, segm.end_ea - ea)

ida_bytes.patch_bytes(ea, cfg_data)
ida_bytes.create_data(ea, ida_bytes.FF_STRLIT, cfg_data_size, BADADDR)

ea += cfg_data_size
make_array(ea, segm.end_ea - ea)
