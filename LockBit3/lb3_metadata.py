import sys
import io
import lb3_hash


RSA_PUBKEY_DWORD0 = 0x5C91175

METADATA_KEY_SIZE = 0x80
METADATA_KEY_HASH_SIZE = 4
METADATA_BASE_SIZE = METADATA_KEY_SIZE + METADATA_KEY_HASH_SIZE + 2

MAX_BLOCK_SIZE = 0xFA1
DIVIDER = 0x1000F


def get_data_hash(data, rsa_pubkey_dword0, n=0):
    """Get data hash"""

    n0 = n & 0xFFFF
    n1 = n >> 16

    size = len(data)

    pos = 0

    while (size != 0):

        block_size = min(size, MAX_BLOCK_SIZE)

        for i in range(block_size):
            n0 += data[pos + i]
            n1 += n0

        n0 %= DIVIDER
        n1 %= DIVIDER

        pos += block_size
        size -= block_size

    return ((n0 + (n1 << 16)) & 0xFFFFFFFF) ^ rsa_pubkey_dword0


def get_meta_data_hash(data, rsa_pubkey_dword0):
    """Get metadata hash"""

    h = 0x0D6917A

    for _ in range(3):

        h2 = get_data_hash(data, rsa_pubkey_dword0, h)
        h = int.from_bytes(h2.to_bytes(4, 'little'), 'big')

    return h


def check_metadata_hash(filename, rsa_pubkey_dword0):
    """Check encrypted file metadata hash"""

    with io.open(filename, 'rb') as f:
        f.seek(-(METADATA_KEY_SIZE + METADATA_KEY_HASH_SIZE), 2)
        metadata = f.read()

    key_hash = int.from_bytes(metadata[:4], 'little')
    h = get_meta_data_hash(metadata[4:], rsa_pubkey_dword0)
    return (h == key_hash)
        


def read_metadata(filename, rsa_pubkey_dword0):
    """Read encrypted file metadata"""

    with io.open(filename, 'rb') as f:
        f.seek(-METADATA_BASE_SIZE, 2)
        add_data_size = int.from_bytes(f.read(2), 'little')
        metadata_size = add_data_size + METADATA_BASE_SIZE
        f.seek(-metadata_size, 2)
        metadata = f.read()

    return metadata


#
# Main
#
if len(sys.argv) != 2:
    print('Usage: '+ sys.argv[0] + ' filename')
    sys.exit(0)

filename = sys.argv[1]

if not check_metadata_hash(filename, RSA_PUBKEY_DWORD0):
    print('Error: file not encrypted or damaged')
    sys.exit(1)

metadata = read_metadata(filename, RSA_PUBKEY_DWORD0)
print('Metadata size: %d' % len(metadata))
tmp_data = metadata[-METADATA_BASE_SIZE : -METADATA_BASE_SIZE + 2]
add_data_size = int.from_bytes(tmp_data, 'little')
print('Additional data size: %d' % add_data_size)

new_filename = filename + '.metadata'
with io.open(new_filename, 'wb') as f:
    f.write(metadata)
